# This document desribes a grammar syntaxes for different languages,
# 1st) using simple rules of predefined grammar
# 2nd) using custom rules for specifics of grammars.
#
# FontStyle can be underline/bold/italic/normal or combinations.


# Preredefinitions of grammars
# colors https://colorswall.com/colors/xkcd

formats:
  - comment: &comment
      settings:
        foreground: white/a60
        fontStyle: italic

  # Variable name or map key
  - name: &name
      settings: { foreground: yellow         }

  - name_quotes: &name_quotes
      settings: { foreground: yellow/a50      }

  - strings: &strings
      settings: { foreground: green        }

  - strings_quotes: &strings_quotes
      settings: { foreground: green/a50    }

  - escape: &escape
      settings: { foreground: blue }


  - nums: &nums
      settings: { foreground: blue }

  - const: &const
      settings:
        foreground: blue
        fontStyle: bold

  - const: &null
      settings:
        foreground: blue
        fontStyle: bold

  - bool: &bool
      settings:
        foreground: blue
        fontStyle: bold

  - strings: &dates
      settings:
        fontStyle: underline

  - structs: &structs
      settings: { foreground: "#e1e1e1"   }

  - puncts: &puncts
      settings: { foreground: cyan  }

  - invalid_input: &invalid_input
      settings:
        foreground: red
        fontStyle: bold

  - OTHER: &other
      settings:
        foreground: "#d63130"

  # language syntax

  - import: &import
      settings: { foreground: orange }

  - import_smt: &import_smt
      settings:
        foreground: orange

  - async: &async
      settings:
        foreground: red

  - flow: &flow
      settings:
        foreground: yellow

  - builtin: &builtin
      settings:
        foreground: blue


  - keywords: &keywords
      settings:
        foreground: orange



grammars:

  - # ~~~ JSON Grammar ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - name: json/name
      <<: *name
      scope:
      - string.json support.type.property-name.json

    - name: json/name/quotes
      <<: *name_quotes
      scope:
      - punctuation.support.type.property-name.begin.json
      - punctuation.support.type.property-name.end.json

    - name: "json/punctuation/structs"
      <<: *structs
      scope:
      - punctuation.definition.dictionary.begin.json
      - punctuation.definition.dictionary.end.json
      - punctuation.separator.dictionary.key-value.json
      - punctuation.separator.dictionary.pair.json
      - punctuation.definition.array.begin.json
      - punctuation.definition.array.end.json

    - name: "json/punctuation"
      <<: *puncts
      scope:
      - punctuation.separator.array.json

    - name: "json/number"
      <<: *nums
      scope:
      - constant.numeric.json

    - name: "json/strings"
      <<: *strings
      scope:
      - string.quoted.double.json

    - name: "json/strings/quotes"
      <<: *strings_quotes
      scope:
      - punctuation.definition.string.begin.json
      - punctuation.definition.string.end.json

    - name: "json/strings/escape"
      <<: *escape
      scope: constant.character.escape.json

    - name: "json/constants"
      <<: *const
      scope: constant.language.json

    - name: "json/constants"
      <<: *const
      scope: constant.language.json

    - name: "json/invalid"
      <<: *invalid_input
      scope:
      - invalid.illegal.expected-array-separator.json
      - invalid.illegal.expected-dictionary-separator.json
      - invalid.illegal.unrecognized-string-escape.json

    - name: "json/other"
      <<: *other
      scope:
      - source.json

  - # ~~~ YAML Grammar ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - name: "yaml/comment"
      <<: *comment
      scope: comment.line.number-sign.yaml

    - name: "yaml/name"
      <<: *name
      scope:
      - entity.name.tag.yaml
      - meta.flow-pair.key.yaml
      - string.quoted.double.yaml meta.flow-mapping.yaml

    - name: "yaml/block"
      <<: *strings
      scope: string.unquoted.block.yaml


    - name: "yaml/string/item"
      <<: *strings
      scope:
      - string.quoted.double.yaml
      - string.quoted.single.yaml
      - string.unquoted.plain.out.yaml
      - string.unquoted.plain.in.yaml
      - string.unquoted.directive-parameter.yaml

    - name: "yaml/string/quotes"
      <<: *strings_quotes
      scope:
      - punctuation.definition.string.begin.yaml
      - punctuation.definition.string.end.yaml

    - name: "yaml/string/escape"
      <<: *escape
      scope:
      - constant.character.escape.double-quoted.newline.yaml
      - constant.character.escape.single-quoted.yaml
      - constant.character.escape.yaml

    - name: "yaml/anchors"
      settings:
        foreground: white
        fontStyle: italic
      scope:
      - entity.name.type.anchor.yaml
      - variable.other.alias.yaml

    - name: "yaml/anchors/punctuation"
      settings:
        foreground: yellow
        fontStyle: bold italic
      scope:
      - punctuation.definition.anchor.yaml
      - punctuation.definition.alias.yaml


    - name: "yaml/punctuation/flow"
      <<: *structs
      scope:
      - meta.flow-mapping.yaml
      - meta.flow-sequence.yaml

    - name: "yaml/punctuation/puncts"
      <<: *puncts
      scope:
      - punctuation.separator.mapping.yaml
      - punctuation.separator.sequence.yaml
      - punctuation.definition.block.sequence.item.yaml
      - punctuation.separator.key-value.mapping.yaml
      - meta.block-mapping.yaml

    - name: "yaml/punctuation/merge"
      settings:
        foreground: green
      scope: constant.language.merge.yaml

    - name: "yaml/invalid"
      <<: *invalid_input
      scope:
      - invalid.illegal.character.anchor.yaml
      - invalid.illegal.expected-comment-or-newline.yaml
      - invalid.illegal.expected-newline.yaml
      - invalid.illegal.tag-handle.yaml
      - invalid.illegal.unrecognized.yaml

    - name: "yaml/types/nums"
      <<: *nums
      scope:
      - constant.numeric.integer.yaml
      - constant.numeric.float.yaml

    - name: "yaml/types/null"
      <<: *null
      scope:
      - constant.language.null.yaml

    - name: "yaml/types/bool"
      <<: *bool
      scope:
      - constant.language.boolean.yaml

    - name: "yaml/types/date"
      settings:
        foreground: blue
        fontStyle: underline
      scope: constant.other.timestamp.yaml

    - name: "yaml/open-close"
      settings:
        foreground: yellow
        fontStyle: bold italic
      scope:
      - entity.other.document.begin.yaml
      - entity.other.document.end.yaml

    - name: "yaml/other"
      <<: *other
      scope: source.yaml

  - # ~~~ Go Grammar ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



    - name: "go/comment"
      <<: *comment
      scope:
      - comment.block.go
      - comment.line.double-slash.go

    - name: "go/package/name"
      <<: *name
      scope:
      - entity.name.package.go
      - entity.alias.import.go
      - entity.name.function.go
      - entity.name.import.go
      - entity.name.package.go
      - entity.name.type.go
      - support.function.go

    - name: "go/builtins"
      <<: *builtin
      scope:
      - support.function.builtin.go

    - name: "go/async"
      <<: *async
      scope:
      - keyword.channel.go
      - keyword.operator.channel.go

    - name: "go/flow"
      <<: *flow
      scope:
      - keyword.control.go

    - name: "go/keywords"
      <<: *keywords
      scope:
      - keyword.import.go
      - keyword.const.go
      - keyword.function.go
      - keyword.interface.go
      - keyword.map.go
      - keyword.package.go
      - keyword.struct.go
      - keyword.type.go
      - keyword.var.go
      - punctuation.definition.imports.begin.bracket.round.go
      - punctuation.definition.imports.end.bracket.round.go

    - name: "go/puncts"
      <<: *puncts
      scope:
      - keyword.operator.address.go
      - keyword.operator.arithmetic.bitwise.go
      - keyword.operator.arithmetic.go
      - keyword.operator.assignment.go
      - keyword.operator.comparison.go
      - keyword.operator.decrement.go
      - keyword.operator.ellipsis.go
      - keyword.operator.increment.go
      - keyword.operator.logical.go


    - name: "go/variable"
      <<: *name
      scope:
      - variable.other.assignment.go

  - # ~~~ Python Grammar ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # - name: "python/import"

    #   scope:
    #   - id
